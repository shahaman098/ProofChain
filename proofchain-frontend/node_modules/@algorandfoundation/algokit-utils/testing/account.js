'use strict';

var algosdk = require('algosdk');
var types_algorandClient = require('../types/algorand-client.js');
var config = require('../config.js');

async function getTestAccount({ suppressLog, initialFunds, accountGetter }, algodOrAlgorandClient, kmd) {
    const algorand = algodOrAlgorandClient instanceof types_algorandClient.AlgorandClient
        ? algodOrAlgorandClient
        : types_algorandClient.AlgorandClient.fromClients({
            algod: algodOrAlgorandClient,
            kmd,
        });
    const account = accountGetter ? await accountGetter(algorand) : algosdk.generateAccount();
    config.Config.getLogger(suppressLog).info(`New test account created with address '${account.addr}' and mnemonic '${algosdk.secretKeyToMnemonic(account.sk)}'.`);
    const dispenser = await algorand.account.dispenserFromEnvironment();
    await algorand.send.payment({
        sender: dispenser,
        receiver: account.addr,
        amount: initialFunds,
        note: 'Funding test account',
        suppressLog,
    });
    const accountInfo = await algorand.account.getInformation(account.addr);
    config.Config.getLogger(suppressLog).info('Test account funded; account balance: %d ÂµALGO', accountInfo.balance.microAlgo);
    algorand.setSignerFromAccount(account);
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const address = algosdk.Address.fromString(account.addr.toString());
    address.addr = account.addr;
    address.sk = account.sk;
    address.signer = algorand.account.getSigner(address);
    return address;
}

exports.getTestAccount = getTestAccount;
//# sourceMappingURL=account.js.map
