{"version":3,"file":"app.js","sources":["../src/app.ts"],"sourcesContent":["import algosdk from 'algosdk'\nimport { _getAppArgsForABICall, _getBoxReference, legacySendAppTransactionBridge } from './transaction/legacy-bridge'\nimport { encodeLease, getSenderAddress } from './transaction/transaction'\nimport {\n  ABIAppCallArgs,\n  ABIReturn,\n  AppCallArgs,\n  AppCallParams,\n  AppCallTransactionResult,\n  AppCallType,\n  AppCompilationResult,\n  AppReference,\n  AppState,\n  BoxIdentifier,\n  BoxName,\n  BoxReference,\n  BoxValueRequestParams,\n  BoxValuesRequestParams,\n  CompiledTeal,\n  CreateAppParams,\n  RawAppCallArgs,\n  UpdateAppParams,\n} from './types/app'\nimport { AppManager } from './types/app-manager'\nimport { SendTransactionFrom } from './types/transaction'\nimport { toNumber } from './util'\nimport ABIMethod = algosdk.ABIMethod\nimport ABIMethodParams = algosdk.ABIMethodParams\nimport ABIValue = algosdk.ABIValue\nimport Address = algosdk.Address\nimport Algodv2 = algosdk.Algodv2\nimport modelsv2 = algosdk.modelsv2\nimport OnApplicationComplete = algosdk.OnApplicationComplete\n\n/**\n * @deprecated Use `algorand.send.appCreate()` / `algorand.createTransaction.appCreate()` / `algorand.send.appCreateMethodCall()`\n * / `algorand.createTransaction.appCreateMethodCall()` instead\n *\n * Creates a smart contract app, returns the details of the created app.\n * @param create The parameters to create the app with\n * @param algod An algod client\n * @returns The details of the created app, or the transaction to create it if `skipSending` and the compilation result\n */\nexport async function createApp(\n  create: CreateAppParams,\n  algod: Algodv2,\n): Promise<Partial<AppCompilationResult> & AppCallTransactionResult & AppReference> {\n  const onComplete = getAppOnCompleteAction(create.onCompleteAction)\n  if (onComplete === algosdk.OnApplicationComplete.ClearStateOC) {\n    throw new Error('Cannot create an app with on-complete action of ClearState')\n  }\n\n  const result = create.args?.method\n    ? await legacySendAppTransactionBridge(\n        algod,\n        create.from,\n        create.args,\n        create,\n        {\n          sender: getSenderAddress(create.from),\n          onComplete,\n          approvalProgram: create.approvalProgram,\n          clearStateProgram: create.clearStateProgram,\n          method: create.args.method instanceof ABIMethod ? create.args.method : new ABIMethod(create.args.method),\n          extraProgramPages: create.schema.extraPages,\n          schema: create.schema,\n        },\n        (c) => c.appCreateMethodCall,\n        (c) => c.appCreateMethodCall,\n      )\n    : await legacySendAppTransactionBridge(\n        algod,\n        create.from,\n        create.args,\n        create,\n        {\n          sender: getSenderAddress(create.from),\n          onComplete,\n          approvalProgram: create.approvalProgram,\n          clearStateProgram: create.clearStateProgram,\n          extraProgramPages: create.schema.extraPages,\n          schema: create.schema,\n        },\n        (c) => c.appCreate,\n        (c) => c.appCreate,\n      )\n\n  return {\n    ...result,\n    appId: 'appId' in result ? Number(result.appId) : 0,\n    appAddress: 'appAddress' in result ? result.appAddress.toString() : '',\n  }\n}\n\n/**\n * @deprecated Use `algorand.send.appUpdate()` / `algorand.createTransaction.appUpdate()` / `algorand.send.appUpdateMethodCall()`\n * / `algorand.createTransaction.appUpdateMethodCall()` instead\n *\n * Updates a smart contract app.\n * @param update The parameters to update the app with\n * @param algod An algod client\n * @returns The transaction send result and the compilation result\n */\nexport async function updateApp(\n  update: UpdateAppParams,\n  algod: Algodv2,\n): Promise<Partial<AppCompilationResult> & AppCallTransactionResult> {\n  return update.args?.method\n    ? await legacySendAppTransactionBridge(\n        algod,\n        update.from,\n        update.args,\n        update,\n        {\n          appId: BigInt(update.appId),\n          sender: getSenderAddress(update.from),\n          onComplete: algosdk.OnApplicationComplete.UpdateApplicationOC,\n          approvalProgram: update.approvalProgram,\n          clearStateProgram: update.clearStateProgram,\n          method: update.args.method instanceof ABIMethod ? update.args.method : new ABIMethod(update.args.method),\n        },\n        (c) => c.appUpdateMethodCall,\n        (c) => c.appUpdateMethodCall,\n      )\n    : await legacySendAppTransactionBridge(\n        algod,\n        update.from,\n        update.args,\n        update,\n        {\n          appId: BigInt(update.appId),\n          sender: getSenderAddress(update.from),\n          onComplete: algosdk.OnApplicationComplete.UpdateApplicationOC,\n          approvalProgram: update.approvalProgram,\n          clearStateProgram: update.clearStateProgram,\n        },\n        (c) => c.appUpdate,\n        (c) => c.appUpdate,\n      )\n}\n\n/**\n * @deprecated Use `algosdk.OnApplicationComplete` directly instead.\n *\n * Returns a `algosdk.OnApplicationComplete` for the given onCompleteAction.\n *\n * If given `undefined` will return `OnApplicationComplete.NoOpOC`.\n *\n * If given an `AppCallType` will convert the string enum to the correct underlying `algosdk.OnApplicationComplete`.\n *\n * @param onCompletionAction The on completion action\n * @returns The `algosdk.OnApplicationComplete`\n */\nexport function getAppOnCompleteAction(onCompletionAction?: AppCallType | OnApplicationComplete) {\n  switch (onCompletionAction) {\n    case undefined:\n    case 'no_op':\n    case OnApplicationComplete.NoOpOC:\n      return OnApplicationComplete.NoOpOC\n    case 'opt_in':\n    case OnApplicationComplete.OptInOC:\n      return OnApplicationComplete.OptInOC\n    case 'close_out':\n    case OnApplicationComplete.CloseOutOC:\n      return OnApplicationComplete.CloseOutOC\n    case 'clear_state':\n    case OnApplicationComplete.ClearStateOC:\n      return OnApplicationComplete.ClearStateOC\n    case 'update_application':\n    case OnApplicationComplete.UpdateApplicationOC:\n      return OnApplicationComplete.UpdateApplicationOC\n    case 'delete_application':\n    case OnApplicationComplete.DeleteApplicationOC:\n      return OnApplicationComplete.DeleteApplicationOC\n  }\n}\n\n/**\n * @deprecated Use `algorand.send.appUpdate()` / `algorand.createTransaction.appUpdate()` / `algorand.send.appUpdateMethodCall()`\n * / `algorand.createTransaction.appUpdateMethodCall()` instead\n *\n * Issues a call to a given app.\n * @param call The call details.\n * @param algod An algod client\n * @returns The result of the call\n */\nexport async function callApp(call: AppCallParams, algod: Algodv2): Promise<AppCallTransactionResult> {\n  const onComplete = getAppOnCompleteAction(call.callType)\n  if (onComplete === algosdk.OnApplicationComplete.UpdateApplicationOC) {\n    throw new Error('Cannot execute an app call with on-complete action of Update')\n  }\n  if (call.args?.method && onComplete === algosdk.OnApplicationComplete.ClearStateOC) {\n    throw new Error('Cannot execute an ABI method call with on-complete action of ClearState')\n  }\n\n  return call.args?.method\n    ? await legacySendAppTransactionBridge(\n        algod,\n        call.from,\n        call.args,\n        call,\n        {\n          appId: BigInt(call.appId),\n          sender: getSenderAddress(call.from),\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          onComplete: onComplete as any,\n          method: call.args.method instanceof ABIMethod ? call.args.method : new ABIMethod(call.args.method),\n        },\n        (c) => c.appCallMethodCall,\n        (c) => c.appCallMethodCall,\n      )\n    : await legacySendAppTransactionBridge(\n        algod,\n        call.from,\n        call.args,\n        call,\n        {\n          appId: BigInt(call.appId),\n          sender: getSenderAddress(call.from),\n          onComplete,\n        },\n        (c) => c.appCall,\n        (c) => c.appCall,\n      )\n}\n\n/**\n * @deprecated Use `AppManager.getABIReturn` instead.\n *\n * Returns any ABI return values for the given app call arguments and transaction confirmation.\n * @param args The arguments that were used for the call\n * @param confirmation The transaction confirmation from algod\n * @returns The return value for the method call\n */\nexport function getABIReturn(args?: AppCallArgs, confirmation?: modelsv2.PendingTransactionResponse): ABIReturn | undefined {\n  if (!args || !args.method) {\n    return undefined\n  }\n  const method = 'txnCount' in args.method ? args.method : new ABIMethod(args.method)\n\n  return AppManager.getABIReturn(confirmation, method)\n}\n\n/**\n * @deprecated Use `algorand.app.getGlobalState` instead.\n *\n * Returns the current global state values for the given app ID\n * @param appId The ID of the app return global state for\n * @param algod An algod client instance\n * @returns The current global state\n */\nexport async function getAppGlobalState(appId: number | bigint, algod: Algodv2) {\n  return await new AppManager(algod).getGlobalState(BigInt(appId))\n}\n\n/**\n * @deprecated Use `algorand.app.getLocalState` instead.\n *\n * Returns the current global state values for the given app ID and account\n * @param appId The ID of the app return global state for\n * @param account Either the string address of an account or an account object for the account to get local state for the given app\n * @param algod An algod client instance\n * @returns The current local state for the given (app, account) combination\n */\nexport async function getAppLocalState(appId: number | bigint, account: string | SendTransactionFrom, algod: Algodv2) {\n  return new AppManager(algod).getLocalState(BigInt(appId), getSenderAddress(account))\n}\n\n/**\n * @deprecated Use `algorand.app.getBoxNames` instead.\n * Returns the names of the boxes for the given app.\n * @param appId The ID of the app return box names for\n * @param algod An algod client instance\n * @returns The current box names\n */\nexport async function getAppBoxNames(appId: number | bigint, algod: Algodv2): Promise<BoxName[]> {\n  return new AppManager(algod).getBoxNames(BigInt(appId))\n}\n\n/**\n * @deprecated Use `algorand.app.getBoxValue` instead.\n * Returns the value of the given box name for the given app.\n * @param appId The ID of the app return box names for\n * @param boxName The name of the box to return either as a string, binary array or `BoxName`\n * @param algod An algod client instance\n * @returns The current box value as a byte array\n */\nexport async function getAppBoxValue(appId: number | bigint, boxName: string | Uint8Array | BoxName, algod: Algodv2): Promise<Uint8Array> {\n  return new AppManager(algod).getBoxValue(BigInt(appId), typeof boxName !== 'string' && 'name' in boxName ? boxName.nameRaw : boxName)\n}\n\n/**\n * @deprecated Use `algorand.app.getBoxValues` instead.\n * Returns the value of the given box names for the given app.\n * @param appId The ID of the app return box names for\n * @param boxNames The names of the boxes to return either as a string, binary array or `BoxName`\n * @param algod An algod client instance\n * @returns The current box values as a byte array in the same order as the passed in box names\n */\nexport async function getAppBoxValues(appId: number, boxNames: (string | Uint8Array | BoxName)[], algod: Algodv2): Promise<Uint8Array[]> {\n  return new AppManager(algod).getBoxValues(\n    BigInt(appId),\n    boxNames.map((b) => (typeof b !== 'string' && 'name' in b ? b.nameRaw : b)),\n  )\n}\n\n/**\n * @deprecated Use `algorand.app.getBoxValueFromABIType` instead.\n * Returns the value of the given box name for the given app decoded based on the given ABI type.\n * @param request The parameters for the box value request\n * @param algod An algod client instance\n * @returns The current box value as an ABI value\n */\nexport async function getAppBoxValueFromABIType(request: BoxValueRequestParams, algod: Algodv2): Promise<ABIValue> {\n  return new AppManager(algod).getBoxValueFromABIType({\n    appId: BigInt(request.appId),\n    boxName: typeof request.boxName !== 'string' && 'name' in request.boxName ? request.boxName.nameRaw : request.boxName,\n    type: request.type,\n  })\n}\n\n/**\n * @deprecated Use `algorand.app.getBoxValuesFromABIType` instead.\n * Returns the value of the given box names for the given app decoded based on the given ABI type.\n * @param request The parameters for the box value request\n * @param algod An algod client instance\n * @returns The current box values as an ABI value in the same order as the passed in box names\n */\nexport async function getAppBoxValuesFromABIType(request: BoxValuesRequestParams, algod: Algodv2): Promise<ABIValue[]> {\n  return new AppManager(algod).getBoxValuesFromABIType({\n    appId: BigInt(request.appId),\n    boxNames: request.boxNames.map((b) => (typeof b !== 'string' && 'name' in b ? b.nameRaw : b)),\n    type: request.type,\n  })\n}\n\n/**\n * @deprecated Use `AppManager.decodeAppState` instead.\n *\n * Converts an array of global/local state values from the algod api to a more friendly\n * generic object keyed by the UTF-8 value of the key.\n * @param state A `global-state`, `local-state`, `global-state-deltas` or `local-state-deltas`\n * @returns An object keyeed by the UTF-8 representation of the key with various parsings of the values\n */\nexport function decodeAppState(state: { key: string; value: modelsv2.TealValue | modelsv2.EvalDelta }[]): AppState {\n  return AppManager.decodeAppState(state.map(({ key, value }) => ({ key: Buffer.from(key, 'utf-8'), value })))\n}\n\n/**\n * @deprecated Use `TransactionComposer` methods to construct transactions instead.\n *\n * Returns the app args ready to load onto an app `Transaction` object\n * @param args The app call args\n * @returns The args ready to load into a `Transaction`\n */\nexport function getAppArgsForTransaction(args?: RawAppCallArgs) {\n  if (!args) return undefined\n\n  const encoder = new TextEncoder()\n  return {\n    accounts: args?.accounts?.map(_getAccountAddress),\n    appArgs: args?.appArgs?.map((a) => (typeof a === 'string' ? encoder.encode(a) : a)),\n    boxes: args.boxes?.map(getBoxReference),\n    foreignApps: args?.apps,\n    foreignAssets: args?.assets,\n    lease: encodeLease(args?.lease),\n  }\n}\n\n/**\n * @deprecated Use `TransactionComposer` methods to construct transactions instead.\n *\n * Returns the app args ready to load onto an ABI method call in `AtomicTransactionComposer`\n * @param args The ABI app call args\n * @param from The transaction signer\n * @returns The parameters ready to pass into `addMethodCall` within AtomicTransactionComposer\n */\nexport async function getAppArgsForABICall(args: ABIAppCallArgs, from: SendTransactionFrom) {\n  return _getAppArgsForABICall(args, from)\n}\n\n/**\n * @deprecated Use `AppManager.getBoxReference()` instead.\n *\n * Returns a `algosdk.BoxReference` given a `BoxIdentifier` or `BoxReference`.\n * @param box The box to return a reference for\n * @returns The box reference ready to pass into a `Transaction`\n */\nexport function getBoxReference(box: BoxIdentifier | BoxReference | algosdk.BoxReference): algosdk.BoxReference {\n  return _getBoxReference(box)\n}\n\nfunction _getAccountAddress(account: string | Address) {\n  return typeof account === 'string' ? account : algosdk.encodeAddress(account.publicKey)\n}\n\n/**\n * @deprecated Use `algorand.app.getById` instead.\n *\n * Gets the current data for the given app from algod.\n *\n * @param appId The id of the app\n * @param algod An algod client\n * @returns The data about the app\n */\nexport async function getAppById(appId: number | bigint, algod: Algodv2) {\n  return await algod.getApplicationByID(toNumber(appId)).do()\n}\n\n/**\n * @deprecated Use `algorand.app.compileTeal` instead.\n *\n * Compiles the given TEAL using algod and returns the result, including source map.\n *\n * @param algod An algod client\n * @param tealCode The TEAL code\n * @returns The information about the compiled file\n */\nexport async function compileTeal(tealCode: string, algod: Algodv2): Promise<CompiledTeal> {\n  return await new AppManager(algod).compileTeal(tealCode)\n}\n\n/**\n * @deprecated Use `abiMethod.getSignature()` or `new ABIMethod(abiMethodParams).getSignature()` instead.\n *\n * Returns the encoded ABI spec for a given ABI Method\n * @param method The method to return a signature for\n * @returns The encoded ABI method spec e.g. `method_name(uint64,string)string`\n */\nexport const getABIMethodSignature = (method: ABIMethodParams | ABIMethod) => {\n  return 'getSignature' in method ? method.getSignature() : new ABIMethod(method).getSignature()\n}\n"],"names":["legacySendAppTransactionBridge","getSenderAddress","AppManager","encodeLease","_getAppArgsForABICall","_getBoxReference","toNumber"],"mappings":"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"}