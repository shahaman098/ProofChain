{"version":3,"file":"transfer-algos.mjs","sources":["../../src/transfer/transfer-algos.ts"],"sourcesContent":["import algosdk from 'algosdk'\nimport { legacySendTransactionBridge } from '../transaction/legacy-bridge'\nimport { encodeTransactionNote, getSenderAddress } from '../transaction/transaction'\nimport { PaymentParams } from '../types/composer'\nimport { SendTransactionResult } from '../types/transaction'\nimport { AlgoTransferParams } from '../types/transfer'\nimport Algodv2 = algosdk.Algodv2\n\n/**\n * @deprecated Use `algorand.send.payment()` / `algorand.createTransaction.payment()` instead\n *\n * Transfer Algo between two accounts.\n * @param transfer The transfer definition\n * @param algod An algod client\n * @returns The transaction object and optionally the confirmation if it was sent to the chain (`skipSending` is `false` or unset)\n *\n * @example Usage example\n * ```typescript\n * await algokit.transferAlgos({ from, to, amount: algokit.algo(1) }, algod)\n * ```\n */\nexport async function transferAlgos(transfer: AlgoTransferParams, algod: Algodv2): Promise<SendTransactionResult> {\n  const params: PaymentParams = {\n    sender: getSenderAddress(transfer.from),\n    receiver: getSenderAddress(transfer.to),\n    amount: transfer.amount,\n    note: encodeTransactionNote(transfer.note),\n    lease: transfer.lease,\n  }\n\n  return await legacySendTransactionBridge(\n    algod,\n    transfer.from,\n    transfer,\n    params,\n    (c) => c.payment,\n    (c) => c.payment,\n  )\n}\n"],"names":[],"mappings":";;;AAQA;;;;;;;;;;;;AAYG;AACI,eAAe,aAAa,CAAC,QAA4B,EAAE,KAAc,EAAA;AAC9E,IAAA,MAAM,MAAM,GAAkB;AAC5B,QAAA,MAAM,EAAE,gBAAgB,CAAC,QAAQ,CAAC,IAAI,CAAC;AACvC,QAAA,QAAQ,EAAE,gBAAgB,CAAC,QAAQ,CAAC,EAAE,CAAC;QACvC,MAAM,EAAE,QAAQ,CAAC,MAAM;AACvB,QAAA,IAAI,EAAE,qBAAqB,CAAC,QAAQ,CAAC,IAAI,CAAC;QAC1C,KAAK,EAAE,QAAQ,CAAC,KAAK;KACtB;AAED,IAAA,OAAO,MAAM,2BAA2B,CACtC,KAAK,EACL,QAAQ,CAAC,IAAI,EACb,QAAQ,EACR,MAAM,EACN,CAAC,CAAC,KAAK,CAAC,CAAC,OAAO,EAChB,CAAC,CAAC,KAAK,CAAC,CAAC,OAAO,CACjB;AACH;;;;"}