'use strict';

var algosdk = require('algosdk');
var client = require('algosdk/client');
var config = require('../config.js');

/** A HTTP Client that wraps the Algorand SDK HTTP Client with retries */
class AlgoHttpClientWithRetry extends client.URLTokenBaseHTTPClient {
    async callWithRetry(func) {
        let response;
        let numTries = 1;
        do {
            try {
                response = await func();
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
            }
            catch (err) {
                if (numTries >= AlgoHttpClientWithRetry.MAX_TRIES) {
                    throw err;
                }
                // Only retry for one of the hardcoded conditions
                if (!(AlgoHttpClientWithRetry.RETRY_ERROR_CODES.includes(err.code) ||
                    AlgoHttpClientWithRetry.RETRY_STATUS_CODES.includes(Number(err.status)) ||
                    ('response' in err && AlgoHttpClientWithRetry.RETRY_STATUS_CODES.includes(Number(err.response.status))))) {
                    throw err;
                }
                // Retry immediately the first time, then exponentially backoff.
                const delayTimeMs = numTries == 1 ? 0 : Math.min(1000 * Math.pow(2, numTries - 1), AlgoHttpClientWithRetry.MAX_BACKOFF_MS);
                if (delayTimeMs > 0) {
                    await new Promise((r) => setTimeout(r, delayTimeMs));
                }
                config.Config.logger.warn(`algosdk request failed ${numTries} times. Retrying in ${delayTimeMs}ms: ${err}`);
            }
        } while (!response && ++numTries <= AlgoHttpClientWithRetry.MAX_TRIES);
        return response;
    }
    async get(relativePath, query, requestHeaders = {}) {
        const response = await this.callWithRetry(() => super.get(relativePath, query, requestHeaders));
        if (relativePath.startsWith('/v2/accounts/') &&
            relativePath.endsWith('/created-applications') &&
            response.status === 200 &&
            query?.['include-all']?.toString() === 'true') {
            // todo: Temporary hack
            // Indexer get created applications by account returns approvalProgram and clearStateProgram as null, which breaks the algosdk@3 decoder
            // instead we will detect this call and set them to empty byte arrays
            try {
                const json = algosdk.parseJSON(Buffer.from(response.body).toString(), { intDecoding: algosdk.IntDecoding.MIXED });
                if (json.applications) {
                    for (const app of json.applications) {
                        if (app.params) {
                            if (app.params['approval-program'] === null) {
                                app.params['approval-program'] = '';
                            }
                            if (app.params['clear-state-program'] === null) {
                                app.params['clear-state-program'] = '';
                            }
                        }
                    }
                    response.body = Buffer.from(algosdk.stringifyJSON(json));
                }
            }
            catch (e) {
                // Make this hack resilient so we never break the app
                config.Config.logger.warn('Failed to fix indexer response for created applications', e);
            }
        }
        return response;
    }
    async post(relativePath, data, query, requestHeaders = {}) {
        return await this.callWithRetry(() => super.post(relativePath, data, query, requestHeaders));
    }
    async delete(relativePath, data, query, requestHeaders = {}) {
        return await this.callWithRetry(() => super.delete(relativePath, data, query, requestHeaders));
    }
}
AlgoHttpClientWithRetry.MAX_TRIES = 5;
AlgoHttpClientWithRetry.MAX_BACKOFF_MS = 10000;
// These lists come from https://visionmedia.github.io/superagent/#retrying-requests
// which is the underlying library used by algosdk - but the CloudFlare specific 52X status codes have been removed
AlgoHttpClientWithRetry.RETRY_STATUS_CODES = [408, 413, 429, 500, 502, 503, 504];
AlgoHttpClientWithRetry.RETRY_ERROR_CODES = [
    'ETIMEDOUT',
    'ECONNRESET',
    'EADDRINUSE',
    'ECONNREFUSED',
    'EPIPE',
    'ENOTFOUND',
    'ENETUNREACH',
    'EAI_AGAIN',
    'EPROTO', // We get this intermittently with AlgoNode API
];

exports.AlgoHttpClientWithRetry = AlgoHttpClientWithRetry;
//# sourceMappingURL=algo-http-client-with-retry.js.map
