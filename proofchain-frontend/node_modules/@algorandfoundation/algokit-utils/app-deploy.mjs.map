{"version":3,"file":"app-deploy.mjs","sources":["../src/app-deploy.ts"],"sourcesContent":["import algosdk, { Address } from 'algosdk'\nimport { compileTeal, getAppOnCompleteAction } from './app'\nimport { _getAppArgsForABICall, _getBoxReference } from './transaction/legacy-bridge'\nimport { getSenderAddress, getSenderTransactionSigner } from './transaction/transaction'\nimport { AlgorandClientTransactionSender } from './types/algorand-client-transaction-sender'\nimport {\n  ABIReturn,\n  APP_DEPLOY_NOTE_DAPP,\n  AppCompilationResult,\n  AppDeployMetadata,\n  AppDeploymentParams,\n  AppLookup,\n  AppMetadata,\n  CompiledTeal,\n  TealTemplateParams,\n} from './types/app'\nimport { AppDeployer } from './types/app-deployer'\nimport { AppManager, BoxReference } from './types/app-manager'\nimport { AssetManager } from './types/asset-manager'\nimport {\n  AppCreateMethodCall,\n  AppCreateParams,\n  AppDeleteMethodCall,\n  AppDeleteParams,\n  AppUpdateMethodCall,\n  AppUpdateParams,\n  TransactionComposer,\n} from './types/composer'\nimport { Arc2TransactionNote, ConfirmedTransactionResult, ConfirmedTransactionResults, SendTransactionFrom } from './types/transaction'\nimport Algodv2 = algosdk.Algodv2\nimport Indexer = algosdk.Indexer\nimport modelsv2 = algosdk.modelsv2\n\n/**\n * @deprecated Use `algorand.appDeployer.deploy` instead.\n *\n * Idempotently deploy (create, update/delete if changed) an app against the given name via the given creator account, including deploy-time template placeholder substitutions.\n *\n * To understand the architecture decisions behind this functionality please see https://github.com/algorandfoundation/algokit-cli/blob/main/docs/architecture-decisions/2023-01-12_smart-contract-deployment.md\n *\n * **Note:** When using the return from this function be sure to check `operationPerformed` to get access to various return properties like `transaction`, `confirmation` and `deleteResult`.\n *\n * **Note:** if there is a breaking state schema change to an existing app (and `onSchemaBreak` is set to `'replace'`) the existing app will be deleted and re-created.\n *\n * **Note:** if there is an update (different TEAL code) to an existing app (and `onUpdate` is set to `'replace'`) the existing app will be deleted and re-created.\n * @param deployment The arguments to control the app deployment\n * @param algod An algod client\n * @param indexer An indexer client, needed if `existingDeployments` not passed in\n * @returns The app reference of the new/existing app\n */\nexport async function deployApp(\n  deployment: AppDeploymentParams,\n  algod: Algodv2,\n  indexer?: Indexer,\n): Promise<\n  Partial<AppCompilationResult> &\n    (\n      | (ConfirmedTransactionResults & AppMetadata & { return?: ABIReturn; operationPerformed: 'create' | 'update' })\n      | (ConfirmedTransactionResults &\n          AppMetadata & {\n            return?: ABIReturn\n            deleteReturn?: ABIReturn\n            deleteResult: ConfirmedTransactionResult\n            operationPerformed: 'replace'\n          })\n      | (AppMetadata & { operationPerformed: 'nothing' })\n    )\n> {\n  const appManager = new AppManager(algod)\n  const newGroup = () =>\n    new TransactionComposer({\n      algod,\n      getSigner: () => getSenderTransactionSigner(deployment.from),\n      getSuggestedParams: async () =>\n        deployment.transactionParams ? { ...deployment.transactionParams } : await algod.getTransactionParams().do(),\n      appManager,\n    })\n  const deployer = new AppDeployer(\n    appManager,\n    new AlgorandClientTransactionSender(newGroup, new AssetManager(algod, newGroup), appManager),\n    indexer,\n  )\n\n  const createParams = {\n    approvalProgram: deployment.approvalProgram,\n    clearStateProgram: deployment.clearStateProgram,\n    sender: getSenderAddress(deployment.from),\n    accountReferences: deployment.createArgs?.accounts?.map((a) => (typeof a === 'string' ? a : algosdk.encodeAddress(a.publicKey))),\n    appReferences: deployment.createArgs?.apps?.map((a) => BigInt(a)),\n    assetReferences: deployment.createArgs?.assets?.map((a) => BigInt(a)),\n    boxReferences: deployment.createArgs?.boxes\n      ?.map(_getBoxReference)\n      ?.map((r) => ({ appId: BigInt(r.appIndex), name: r.name }) satisfies BoxReference),\n    lease: deployment.createArgs?.lease,\n    rekeyTo: deployment.createArgs?.rekeyTo ? getSenderAddress(deployment.createArgs?.rekeyTo) : undefined,\n    staticFee: deployment.fee,\n    maxFee: deployment.maxFee,\n    extraProgramPages: deployment.schema.extraPages,\n    onComplete: getAppOnCompleteAction(deployment.createOnCompleteAction) as Exclude<\n      algosdk.OnApplicationComplete,\n      algosdk.OnApplicationComplete.ClearStateOC\n    >,\n    schema: deployment.schema,\n  } satisfies Partial<AppCreateParams>\n\n  const updateParams = {\n    approvalProgram: deployment.approvalProgram,\n    clearStateProgram: deployment.clearStateProgram,\n    sender: getSenderAddress(deployment.from),\n    accountReferences: deployment.updateArgs?.accounts?.map((a) => (typeof a === 'string' ? a : algosdk.encodeAddress(a.publicKey))),\n    appReferences: deployment.updateArgs?.apps?.map((a) => BigInt(a)),\n    assetReferences: deployment.updateArgs?.assets?.map((a) => BigInt(a)),\n    boxReferences: deployment.updateArgs?.boxes\n      ?.map(_getBoxReference)\n      ?.map((r) => ({ appId: BigInt(r.appIndex), name: r.name }) satisfies BoxReference),\n    lease: deployment.updateArgs?.lease,\n    rekeyTo: deployment.updateArgs?.rekeyTo ? getSenderAddress(deployment.updateArgs?.rekeyTo) : undefined,\n    staticFee: deployment.fee,\n    maxFee: deployment.maxFee,\n    onComplete: algosdk.OnApplicationComplete.UpdateApplicationOC,\n  } satisfies Partial<AppUpdateParams>\n\n  const deleteParams = {\n    sender: getSenderAddress(deployment.from),\n    accountReferences: deployment.deleteArgs?.accounts?.map((a) => (typeof a === 'string' ? a : algosdk.encodeAddress(a.publicKey))),\n    appReferences: deployment.deleteArgs?.apps?.map((a) => BigInt(a)),\n    assetReferences: deployment.deleteArgs?.assets?.map((a) => BigInt(a)),\n    boxReferences: deployment.deleteArgs?.boxes\n      ?.map(_getBoxReference)\n      ?.map((r) => ({ appId: BigInt(r.appIndex), name: r.name }) satisfies BoxReference),\n    lease: deployment.deleteArgs?.lease,\n    rekeyTo: deployment.deleteArgs?.rekeyTo ? getSenderAddress(deployment.deleteArgs?.rekeyTo) : undefined,\n    staticFee: deployment.fee,\n    maxFee: deployment.maxFee,\n    onComplete: algosdk.OnApplicationComplete.DeleteApplicationOC,\n  } satisfies Partial<AppDeleteParams>\n\n  const encoder = new TextEncoder()\n\n  const result = await deployer.deploy({\n    createParams: deployment.createArgs?.method\n      ? ({\n          ...createParams,\n          method:\n            'txnCount' in deployment.createArgs.method ? deployment.createArgs.method : new algosdk.ABIMethod(deployment.createArgs.method),\n          args: (await _getAppArgsForABICall(deployment.createArgs, deployment.from)).methodArgs,\n        } satisfies AppCreateMethodCall)\n      : ({\n          ...createParams,\n          args:\n            'appArgs' in (deployment?.createArgs ?? {})\n              ? deployment.createArgs?.appArgs?.map((a) => (typeof a === 'string' ? encoder.encode(a) : a))\n              : undefined,\n        } satisfies AppCreateParams),\n    updateParams: deployment.updateArgs?.method\n      ? ({\n          ...updateParams,\n          method:\n            'txnCount' in deployment.updateArgs.method ? deployment.updateArgs.method : new algosdk.ABIMethod(deployment.updateArgs.method),\n          args: (await _getAppArgsForABICall(deployment.updateArgs, deployment.from)).methodArgs,\n        } satisfies Omit<AppUpdateMethodCall, 'appId'>)\n      : ({\n          ...updateParams,\n          args:\n            'appArgs' in (deployment?.updateArgs ?? {})\n              ? deployment.updateArgs?.appArgs?.map((a) => (typeof a === 'string' ? encoder.encode(a) : a))\n              : undefined,\n        } satisfies Omit<AppUpdateParams, 'appId'>),\n    deleteParams: deployment.deleteArgs?.method\n      ? ({\n          ...deleteParams,\n          method:\n            'txnCount' in deployment.deleteArgs.method ? deployment.deleteArgs.method : new algosdk.ABIMethod(deployment.deleteArgs.method),\n          args: (await _getAppArgsForABICall(deployment.deleteArgs, deployment.from)).methodArgs,\n        } satisfies Omit<AppDeleteMethodCall, 'appId'>)\n      : ({\n          ...deleteParams,\n          args:\n            'appArgs' in (deployment?.deleteArgs ?? {})\n              ? deployment.deleteArgs?.appArgs?.map((a) => (typeof a === 'string' ? encoder.encode(a) : a))\n              : undefined,\n        } satisfies Omit<AppDeleteParams, 'appId'>),\n    metadata: deployment.metadata,\n    deployTimeParams: deployment.deployTimeParams,\n    onSchemaBreak: deployment.onSchemaBreak,\n    onUpdate: deployment.onUpdate,\n    existingDeployments: deployment.existingDeployments\n      ? {\n          creator: Address.fromString(deployment.existingDeployments.creator),\n          apps: Object.fromEntries(\n            Object.entries(deployment.existingDeployments.apps).map(([name, app]) => [\n              name,\n              {\n                ...app,\n                appAddress: Address.fromString(app.appAddress),\n                appId: BigInt(app.appId),\n                createdRound: BigInt(app.createdRound),\n                updatedRound: BigInt(app.updatedRound),\n              },\n            ]),\n          ),\n        }\n      : undefined,\n    maxRoundsToWaitForConfirmation: deployment.maxRoundsToWaitForConfirmation,\n    populateAppCallResources: deployment.populateAppCallResources,\n    suppressLog: deployment.suppressLog,\n  })\n\n  return {\n    ...result,\n    appAddress: result.appAddress.toString(),\n    appId: Number(result.appId),\n    createdRound: Number(result.createdRound),\n    updatedRound: Number(result.updatedRound),\n  }\n}\n\n/**\n * @deprecated Use `before.numByteSlice < after.numByteSlice || before.numUint < after.numUint` instead.\n *\n * Returns true is there is a breaking change in the application state schema from before to after.\n *  i.e. if the schema becomes larger, since applications can't ask for more schema after creation.\n *  Otherwise, there is no error, the app just doesn't store data in the extra schema :(\n *\n * @param before The existing schema\n * @param after The new schema\n * @returns Whether or not there is a breaking change\n */\nexport function isSchemaIsBroken(before: modelsv2.ApplicationStateSchema, after: modelsv2.ApplicationStateSchema) {\n  return before.numByteSlice < after.numByteSlice || before.numUint < after.numUint\n}\n\n/**\n * @deprecated Use `algorand.appDeployer.getCreatorAppsByName` instead.\n *\n * Returns a lookup of name => app metadata (id, address, ...metadata) for all apps created by the given account that have an `AppDeployNote` in the transaction note of the creation transaction.\n *\n * **Note:** It's recommended this is only called once and then stored since it's a somewhat expensive operation (multiple indexer calls).\n *\n * @param creatorAccount The account (with private key loaded) or string address of an account that is the creator of the apps you want to search for\n * @param indexer An indexer client\n * @returns A name-based lookup of the app information (id, address)\n */\nexport async function getCreatorAppsByName(creatorAccount: SendTransactionFrom | string, indexer: Indexer): Promise<AppLookup> {\n  const lookup = await new AppDeployer(undefined!, undefined!, indexer).getCreatorAppsByName(getSenderAddress(creatorAccount))\n\n  return {\n    creator: lookup.creator.toString(),\n    apps: Object.fromEntries(\n      Object.entries(lookup.apps).map(([name, app]) => [\n        name,\n        {\n          ...app,\n          appAddress: app.appAddress.toString(),\n          appId: Number(app.appId),\n          createdRound: Number(app.createdRound),\n          updatedRound: Number(app.updatedRound),\n        },\n      ]),\n    ),\n  }\n}\n\n/**\n * @deprecated Use `{ dAppName: APP_DEPLOY_NOTE_DAPP, data: metadata, format: 'j' }` instead.\n *\n * Return the transaction note for an app deployment.\n * @param metadata The metadata of the deployment\n * @returns The transaction note as a utf-8 string\n */\nexport function getAppDeploymentTransactionNote(metadata: AppDeployMetadata): Arc2TransactionNote {\n  return {\n    dAppName: APP_DEPLOY_NOTE_DAPP,\n    data: metadata,\n    format: 'j',\n  }\n}\n\n/**\n * @deprecated Use `AppManager.replaceTealTemplateDeployTimeControlParams` instead\n *\n * Replaces deploy-time deployment control parameters within the given teal code.\n *\n * * `TMPL_UPDATABLE` for updatability / immutability control\n * * `TMPL_DELETABLE` for deletability / permanence control\n *\n * Note: If these values are not undefined, but the corresponding `TMPL_*` value\n *  isn't in the teal code it will throw an exception.\n *\n * @param tealCode The TEAL code to substitute\n * @param params The deploy-time deployment control parameter value to replace\n * @returns The replaced TEAL code\n */\nexport function replaceDeployTimeControlParams(tealCode: string, params: { updatable?: boolean; deletable?: boolean }) {\n  return AppManager.replaceTealTemplateDeployTimeControlParams(tealCode, params)\n}\n\n/**\n * @deprecated Use `AppManager.replaceTealTemplateParams` instead\n *\n * Performs template substitution of a teal file.\n *\n * Looks for `TMPL_{parameter}` for template replacements.\n *\n * @param tealCode The TEAL logic to compile\n * @param templateParams Any parameters to replace in the .teal file before compiling\n * @returns The TEAL code with replacements\n */\nexport function performTemplateSubstitution(tealCode: string, templateParams?: TealTemplateParams) {\n  return AppManager.replaceTealTemplateParams(tealCode, templateParams)\n}\n\n/**\n * @deprecated Use `algorand.appManager.compileTealTemplate` instead.\n *\n * Performs template substitution of a teal file and compiles it, returning the compiled result.\n *\n * Looks for `TMPL_{parameter}` for template replacements.\n *\n * @param tealCode The TEAL logic to compile\n * @param algod An algod client\n * @param templateParams Any parameters to replace in the .teal file before compiling\n * @param deploymentMetadata The deployment metadata the app will be deployed with\n * @returns The information about the compiled code\n */\nexport async function performTemplateSubstitutionAndCompile(\n  tealCode: string,\n  algod: Algodv2,\n  templateParams?: TealTemplateParams,\n  deploymentMetadata?: AppDeployMetadata,\n): Promise<CompiledTeal> {\n  tealCode = stripTealComments(tealCode)\n\n  tealCode = performTemplateSubstitution(tealCode, templateParams)\n\n  if (deploymentMetadata) {\n    tealCode = replaceDeployTimeControlParams(tealCode, deploymentMetadata)\n  }\n\n  return await compileTeal(tealCode, algod)\n}\n\n/**\n * @deprecated Use `AppManager.stripTealComments` instead.\n *\n * Remove comments from TEAL Code\n *\n * @param tealCode The TEAL logic to compile\n * @returns The TEAL without comments\n */\nexport function stripTealComments(tealCode: string) {\n  return AppManager.stripTealComments(tealCode)\n}\n"],"names":[],"mappings":"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"}