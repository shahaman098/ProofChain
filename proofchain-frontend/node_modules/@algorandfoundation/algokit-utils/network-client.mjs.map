{"version":3,"file":"network-client.mjs","sources":["../src/network-client.ts"],"sourcesContent":["import algosdk from 'algosdk'\nimport { ClientManager } from './types/client-manager'\nimport { AlgoClientConfig, AlgoConfig } from './types/network-client'\nimport Algodv2 = algosdk.Algodv2\nimport Indexer = algosdk.Indexer\nimport Kmd = algosdk.Kmd\n\n/**\n * @deprecated Use `ClientManager.getConfigFromEnvironmentOrLocalNet()` instead.\n *\n * Retrieve configurations from environment variables when defined or get defaults (expects to be called from a Node.js environment not algod-side)\n */\nexport function getConfigFromEnvOrDefaults(): AlgoConfig {\n  return ClientManager.getConfigFromEnvironmentOrLocalNet()\n}\n\n/**\n * @deprecated Use `ClientManager.getAlgodConfigFromEnvironment()` instead.\n *\n * Retrieve the algod configuration from environment variables (expects to be called from a Node.js environment not algod-side)\n */\nexport function getAlgodConfigFromEnvironment(): AlgoClientConfig {\n  return ClientManager.getAlgodConfigFromEnvironment()\n}\n\n/**\n * @deprecated Use `ClientManager.getIndexerConfigFromEnvironment()` instead.\n *\n * Retrieve the indexer configuration from environment variables (expects to be called from a Node.js environment not algod-side)\n */\nexport function getIndexerConfigFromEnvironment(): AlgoClientConfig {\n  return ClientManager.getIndexerConfigFromEnvironment()\n}\n\n/**\n * @deprecated Use `ClientManager.getAlgoNodeConfig(network, config)` instead.\n *\n * Returns the Algorand configuration to point to the AlgoNode service\n *\n * @param network Which network to connect to - TestNet or MainNet\n * @param config Which algod config to return - Algod or Indexer\n */\nexport function getAlgoNodeConfig(network: 'testnet' | 'mainnet', config: 'algod' | 'indexer'): AlgoClientConfig {\n  return ClientManager.getAlgoNodeConfig(network, config)\n}\n\n/**\n * @deprecated Use `ClientManager.getDefaultLocalNetConfig(configOrPort)` instead.\n *\n * Returns the Algorand configuration to point to the default LocalNet\n *\n * @param configOrPort Which algod config to return - algod, kmd, or indexer OR a port number\n */\nexport function getDefaultLocalNetConfig(configOrPort: 'algod' | 'indexer' | 'kmd' | number): AlgoClientConfig {\n  return ClientManager.getDefaultLocalNetConfig(configOrPort)\n}\n\n/**\n * @deprecated Use `ClientManager.getAlgodClient(config)` or `ClientManager.getAlgodClientFromEnvironment()` instead.\n *\n * Returns an algod SDK client that automatically retries transient failures on idempotent calls\n *\n * @param config The config if you want to override the default (getting config from process.env)\n * @example Default (load from environment variables)\n *\n *  ```typescript\n *  // Uses process.env.ALGOD_SERVER, process.env.ALGOD_PORT and process.env.ALGOD_TOKEN\n *  // Automatically detects if you are using PureStake to switch in the right header name for ALGOD_TOKEN\n *  const algod = getAlgoClient()\n *  await algod.healthCheck().do()\n *  ```\n * @example AlgoNode (testnet)\n * ```typescript\n *  const algod = getAlgoClient(getAlgoNodeConfig('testnet', 'algod'))\n *  await algod.healthCheck().do()\n * ```\n * @example AlgoNode (mainnet)\n * ```typescript\n *  const algod = getAlgoClient(getAlgoNodeConfig('mainnet', 'algod'))\n *  await algod.healthCheck().do()\n * ```\n * @example Custom (e.g. default LocalNet, although we recommend loading this into a .env and using the Default option instead)\n * ```typescript\n *  const algod = getAlgoClient({server: 'http://localhost', port: '4001', token: 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'})\n *  await algod.healthCheck().do()\n * ```\n */\nexport function getAlgoClient(config?: AlgoClientConfig): Algodv2 {\n  return config ? ClientManager.getAlgodClient(config) : ClientManager.getAlgodClientFromEnvironment()\n}\n\n/**\n * @deprecated Use `ClientManager.getIndexerClient(config, overrideIntDecoding)` or `ClientManager.getIndexerClientFromEnvironment(overrideIntDecoding)` instead.\n *\n * Returns an indexer SDK client that automatically retries transient failures on idempotent calls\n *\n * @param config The config if you want to override the default (getting config from process.env)\n * @example Default (load from environment variables)\n *\n *  ```typescript\n *  // Uses process.env.INDEXER_SERVER, process.env.INDEXER_PORT and process.env.INDEXER_TOKEN\n *  const indexer = getAlgoIndexerClient()\n *  await indexer.makeHealthCheck().do()\n *  ```\n * @example AlgoNode (testnet)\n * ```typescript\n *  const indexer = getAlgoIndexerClient(getAlgoNodeConfig('testnet', 'indexer'))\n *  await indexer.makeHealthCheck().do()\n * ```\n * @example AlgoNode (mainnet)\n * ```typescript\n *  const indexer = getAlgoIndexerClient(getAlgoNodeConfig('mainnet', 'indexer'))\n *  await indexer.makeHealthCheck().do()\n * ```\n * @example Custom (e.g. default LocalNet, although we recommend loading this into a .env and using the Default option instead)\n * ```typescript\n *  const indexer = getAlgoIndexerClient({server: 'http://localhost', port: '8980', token: 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'})\n *  await indexer.makeHealthCheck().do()\n * ```\n */\nexport function getAlgoIndexerClient(config?: AlgoClientConfig): Indexer {\n  return config ? ClientManager.getIndexerClient(config) : ClientManager.getIndexerClientFromEnvironment()\n}\n\n/**\n * @deprecated Use `ClientManager.getKmdClient(config)` or `ClientManager.getKmdClientFromEnvironment()` instead.\n *\n * Returns a KMD SDK client that automatically retries transient failures on idempotent calls.\n *\n * KMD client allows you to export private keys, which is useful to get the default account in a LocalNet network.\n *\n * @param config The config if you want to override the default (getting config from process.env)\n * @example Default (load from environment variables)\n *\n *  ```typescript\n *  // Uses process.env.ALGOD_SERVER, process.env.KMD_PORT (or if not specified: port 4002) and process.env.ALGOD_TOKEN\n *  const kmd = getAlgoKmdClient()\n *  ```\n * @example Custom (e.g. default LocalNet, although we recommend loading this into a .env and using the Default option instead)\n * ```typescript\n *  const kmd = getAlgoKmdClient({server: 'http://localhost', port: '4002', token: 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'})\n * ```\n */\nexport function getAlgoKmdClient(config?: AlgoClientConfig): Kmd {\n  return config ? ClientManager.getKmdClient(config) : ClientManager.getKmdClientFromEnvironment()\n}\n\n/** @deprecated Use `await algorand.client.isTestNet()` or `await new ClientManager({ algod }).isTestNet()` instead. */\nexport async function isTestNet(algod: Algodv2): Promise<boolean> {\n  return await new ClientManager({ algod }).isTestNet()\n}\n\n/** @deprecated Use `await algorand.client.isMainNet()` or `await new ClientManager({ algod }).isMainNet()` instead. */\nexport async function isMainNet(algod: Algodv2): Promise<boolean> {\n  return await new ClientManager({ algod }).isMainNet()\n}\n"],"names":[],"mappings":";;AAOA;;;;AAIG;SACa,0BAA0B,GAAA;AACxC,IAAA,OAAO,aAAa,CAAC,kCAAkC,EAAE;AAC3D;AAEA;;;;AAIG;SACa,6BAA6B,GAAA;AAC3C,IAAA,OAAO,aAAa,CAAC,6BAA6B,EAAE;AACtD;AAEA;;;;AAIG;SACa,+BAA+B,GAAA;AAC7C,IAAA,OAAO,aAAa,CAAC,+BAA+B,EAAE;AACxD;AAEA;;;;;;;AAOG;AACa,SAAA,iBAAiB,CAAC,OAA8B,EAAE,MAA2B,EAAA;IAC3F,OAAO,aAAa,CAAC,iBAAiB,CAAC,OAAO,EAAE,MAAM,CAAC;AACzD;AAEA;;;;;;AAMG;AACG,SAAU,wBAAwB,CAAC,YAAkD,EAAA;AACzF,IAAA,OAAO,aAAa,CAAC,wBAAwB,CAAC,YAAY,CAAC;AAC7D;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BG;AACG,SAAU,aAAa,CAAC,MAAyB,EAAA;AACrD,IAAA,OAAO,MAAM,GAAG,aAAa,CAAC,cAAc,CAAC,MAAM,CAAC,GAAG,aAAa,CAAC,6BAA6B,EAAE;AACtG;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BG;AACG,SAAU,oBAAoB,CAAC,MAAyB,EAAA;AAC5D,IAAA,OAAO,MAAM,GAAG,aAAa,CAAC,gBAAgB,CAAC,MAAM,CAAC,GAAG,aAAa,CAAC,+BAA+B,EAAE;AAC1G;AAEA;;;;;;;;;;;;;;;;;;AAkBG;AACG,SAAU,gBAAgB,CAAC,MAAyB,EAAA;AACxD,IAAA,OAAO,MAAM,GAAG,aAAa,CAAC,YAAY,CAAC,MAAM,CAAC,GAAG,aAAa,CAAC,2BAA2B,EAAE;AAClG;AAEA;AACO,eAAe,SAAS,CAAC,KAAc,EAAA;IAC5C,OAAO,MAAM,IAAI,aAAa,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC,SAAS,EAAE;AACvD;AAEA;AACO,eAAe,SAAS,CAAC,KAAc,EAAA;IAC5C,OAAO,MAAM,IAAI,aAAa,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC,SAAS,EAAE;AACvD;;;;"}