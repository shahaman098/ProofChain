{"version":3,"file":"indexer-lookup.js","sources":["../src/indexer-lookup.ts"],"sourcesContent":["import algosdk, { Address } from 'algosdk'\nimport { LookupAssetHoldingsOptions } from './types/indexer'\nimport Indexer = algosdk.Indexer\nexport type SearchForTransactions = ReturnType<Indexer['searchForTransactions']>\n\nconst DEFAULT_INDEXER_MAX_API_RESOURCES_PER_ACCOUNT = 1000 //MaxAPIResourcesPerAccount: This is the default maximum, though may be provider specific\n\n/**\n * @deprecated Use `indexer.lookupTransactionByID(transactionId).do()`.\n * Looks up a transaction by ID using Indexer.\n * @param transactionId The ID of the transaction to look up\n * @param indexer An indexer client\n * @returns The result of the look-up\n */\nexport async function lookupTransactionById(transactionId: string, indexer: Indexer) {\n  return await indexer.lookupTransactionByID(transactionId).do()\n}\n\n/**\n * @deprecated Use `indexer.lookupAccountByID(accountAddress).do()`.\n * Looks up an account by address using Indexer.\n * @param accountAddress The address of the account to look up\n * @param indexer An indexer client\n * @returns The result of the look-up\n */\nexport async function lookupAccountByAddress(accountAddress: string | Address, indexer: Indexer) {\n  return await indexer.lookupAccountByID(accountAddress).do()\n}\n\n/**\n * Looks up applications that were created by the given address; will automatically paginate through all data.\n * @param indexer An indexer instance\n * @param address The address of the creator to look up\n * @param getAll Whether or not to include deleted applications\n * @param paginationLimit The number of records to return per paginated request, default 1000\n * @returns The list of application results\n */\nexport async function lookupAccountCreatedApplicationByAddress(\n  indexer: Indexer,\n  address: string | Address,\n  getAll: boolean | undefined = undefined,\n  paginationLimit?: number,\n): Promise<algosdk.indexerModels.Application[]> {\n  return await executePaginatedRequest(\n    (response: algosdk.indexerModels.ApplicationsResponse | { message: string }) => {\n      if ('message' in response) {\n        throw { status: 404, ...response }\n      }\n      return response.applications\n    },\n    (nextToken) => {\n      let s = indexer\n        .lookupAccountCreatedApplications(address)\n        .includeAll(getAll)\n        .limit(paginationLimit ?? DEFAULT_INDEXER_MAX_API_RESOURCES_PER_ACCOUNT)\n      if (nextToken) {\n        s = s.nextToken(nextToken)\n      }\n      return s\n    },\n  )\n}\n\n/**\n * Looks up asset holdings for the given asset; will automatically paginate through all data.\n * @param indexer An indexer instance\n * @param assetId The ID of the asset to look up holdings for\n * @param options Optional options to control the lookup\n * @param paginationLimit The number of records to return per paginated request, default 1000\n * @returns The list of application results\n */\nexport async function lookupAssetHoldings(\n  indexer: Indexer,\n  assetId: number | bigint,\n  options?: LookupAssetHoldingsOptions,\n  paginationLimit?: number,\n): Promise<algosdk.indexerModels.MiniAssetHolding[]> {\n  return await executePaginatedRequest(\n    (response: algosdk.indexerModels.AssetBalancesResponse | { message: string }) => {\n      if ('message' in response) {\n        throw { status: 404, ...response }\n      }\n      return response.balances\n    },\n    (nextToken) => {\n      let s = indexer.lookupAssetBalances(Number(assetId)).limit(paginationLimit ?? DEFAULT_INDEXER_MAX_API_RESOURCES_PER_ACCOUNT)\n      if (options?.currencyGreaterThan !== undefined) {\n        s = s.currencyGreaterThan(options.currencyGreaterThan)\n      }\n      if (options?.currencyLessThan !== undefined) {\n        s = s.currencyLessThan(options.currencyLessThan)\n      }\n      if (options?.includeAll !== undefined) {\n        s = s.includeAll(options.includeAll)\n      }\n      if (nextToken) {\n        s = s.nextToken(nextToken)\n      }\n      return s\n    },\n  )\n}\n\n/**\n * Allows transactions to be searched for the given criteria.\n * @param indexer An indexer client\n * @param searchCriteria The criteria to search for\n * @param paginationLimit The number of records to return per paginated request, default 1000\n * @returns The search results\n */\nexport async function searchTransactions(\n  indexer: Indexer,\n  searchCriteria: (s: SearchForTransactions) => SearchForTransactions,\n  paginationLimit?: number,\n): Promise<algosdk.indexerModels.TransactionsResponse> {\n  let currentRound = 0n\n  const transactions = await executePaginatedRequest(\n    (response: algosdk.indexerModels.TransactionsResponse | { message: string }) => {\n      if ('message' in response) {\n        throw { status: 404, ...response }\n      }\n      if (response.currentRound > currentRound) {\n        currentRound = response.currentRound\n      }\n      return response.transactions\n    },\n    (nextToken) => {\n      let s = searchCriteria(indexer.searchForTransactions()).limit(paginationLimit ?? DEFAULT_INDEXER_MAX_API_RESOURCES_PER_ACCOUNT)\n      if (nextToken) {\n        s = s.nextToken(nextToken)\n      }\n      return s\n    },\n  )\n\n  return new algosdk.indexerModels.TransactionsResponse({\n    currentRound,\n    nextToken: undefined,\n    transactions: transactions,\n  })\n}\n\n// https://dev.algorand.co/reference/rest-apis/indexer\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport async function executePaginatedRequest<TResult, TRequest extends { do: () => Promise<any> }>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  extractItems: (response: any) => TResult[],\n  buildRequest: (nextToken?: string) => TRequest,\n): Promise<TResult[]> {\n  const results = []\n\n  let nextToken: string | undefined = undefined\n  while (true) {\n    const request = buildRequest(nextToken)\n    const response = await request.do()\n    const items = extractItems(response)\n    if (items == null || items.length === 0) {\n      break\n    }\n    results.push(...items)\n    nextToken = response['nextToken']\n    if (!nextToken) {\n      break\n    }\n  }\n\n  return results\n}\n"],"names":[],"mappings":";;;;AAKA,MAAM,6CAA6C,GAAG,IAAI,CAAA;AAE1D;;;;;;AAMG;AACI,eAAe,qBAAqB,CAAC,aAAqB,EAAE,OAAgB,EAAA;IACjF,OAAO,MAAM,OAAO,CAAC,qBAAqB,CAAC,aAAa,CAAC,CAAC,EAAE,EAAE;AAChE;AAEA;;;;;;AAMG;AACI,eAAe,sBAAsB,CAAC,cAAgC,EAAE,OAAgB,EAAA;IAC7F,OAAO,MAAM,OAAO,CAAC,iBAAiB,CAAC,cAAc,CAAC,CAAC,EAAE,EAAE;AAC7D;AAEA;;;;;;;AAOG;AACI,eAAe,wCAAwC,CAC5D,OAAgB,EAChB,OAAyB,EACzB,MAAA,GAA8B,SAAS,EACvC,eAAwB,EAAA;AAExB,IAAA,OAAO,MAAM,uBAAuB,CAClC,CAAC,QAA0E,KAAI;AAC7E,QAAA,IAAI,SAAS,IAAI,QAAQ,EAAE;YACzB,MAAM,EAAE,MAAM,EAAE,GAAG,EAAE,GAAG,QAAQ,EAAE;;QAEpC,OAAO,QAAQ,CAAC,YAAY;AAC9B,KAAC,EACD,CAAC,SAAS,KAAI;QACZ,IAAI,CAAC,GAAG;aACL,gCAAgC,CAAC,OAAO;aACxC,UAAU,CAAC,MAAM;AACjB,aAAA,KAAK,CAAC,eAAe,IAAI,6CAA6C,CAAC;QAC1E,IAAI,SAAS,EAAE;AACb,YAAA,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,SAAS,CAAC;;AAE5B,QAAA,OAAO,CAAC;AACV,KAAC,CACF;AACH;AAEA;;;;;;;AAOG;AACI,eAAe,mBAAmB,CACvC,OAAgB,EAChB,OAAwB,EACxB,OAAoC,EACpC,eAAwB,EAAA;AAExB,IAAA,OAAO,MAAM,uBAAuB,CAClC,CAAC,QAA2E,KAAI;AAC9E,QAAA,IAAI,SAAS,IAAI,QAAQ,EAAE;YACzB,MAAM,EAAE,MAAM,EAAE,GAAG,EAAE,GAAG,QAAQ,EAAE;;QAEpC,OAAO,QAAQ,CAAC,QAAQ;AAC1B,KAAC,EACD,CAAC,SAAS,KAAI;AACZ,QAAA,IAAI,CAAC,GAAG,OAAO,CAAC,mBAAmB,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,eAAe,IAAI,6CAA6C,CAAC;AAC5H,QAAA,IAAI,OAAO,EAAE,mBAAmB,KAAK,SAAS,EAAE;YAC9C,CAAC,GAAG,CAAC,CAAC,mBAAmB,CAAC,OAAO,CAAC,mBAAmB,CAAC;;AAExD,QAAA,IAAI,OAAO,EAAE,gBAAgB,KAAK,SAAS,EAAE;YAC3C,CAAC,GAAG,CAAC,CAAC,gBAAgB,CAAC,OAAO,CAAC,gBAAgB,CAAC;;AAElD,QAAA,IAAI,OAAO,EAAE,UAAU,KAAK,SAAS,EAAE;YACrC,CAAC,GAAG,CAAC,CAAC,UAAU,CAAC,OAAO,CAAC,UAAU,CAAC;;QAEtC,IAAI,SAAS,EAAE;AACb,YAAA,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,SAAS,CAAC;;AAE5B,QAAA,OAAO,CAAC;AACV,KAAC,CACF;AACH;AAEA;;;;;;AAMG;AACI,eAAe,kBAAkB,CACtC,OAAgB,EAChB,cAAmE,EACnE,eAAwB,EAAA;IAExB,IAAI,YAAY,GAAG,EAAE;IACrB,MAAM,YAAY,GAAG,MAAM,uBAAuB,CAChD,CAAC,QAA0E,KAAI;AAC7E,QAAA,IAAI,SAAS,IAAI,QAAQ,EAAE;YACzB,MAAM,EAAE,MAAM,EAAE,GAAG,EAAE,GAAG,QAAQ,EAAE;;AAEpC,QAAA,IAAI,QAAQ,CAAC,YAAY,GAAG,YAAY,EAAE;AACxC,YAAA,YAAY,GAAG,QAAQ,CAAC,YAAY;;QAEtC,OAAO,QAAQ,CAAC,YAAY;AAC9B,KAAC,EACD,CAAC,SAAS,KAAI;AACZ,QAAA,IAAI,CAAC,GAAG,cAAc,CAAC,OAAO,CAAC,qBAAqB,EAAE,CAAC,CAAC,KAAK,CAAC,eAAe,IAAI,6CAA6C,CAAC;QAC/H,IAAI,SAAS,EAAE;AACb,YAAA,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,SAAS,CAAC;;AAE5B,QAAA,OAAO,CAAC;AACV,KAAC,CACF;AAED,IAAA,OAAO,IAAI,OAAO,CAAC,aAAa,CAAC,oBAAoB,CAAC;QACpD,YAAY;AACZ,QAAA,SAAS,EAAE,SAAS;AACpB,QAAA,YAAY,EAAE,YAAY;AAC3B,KAAA,CAAC;AACJ;AAEA;AACA;AACO,eAAe,uBAAuB;AAC3C;AACA,YAA0C,EAC1C,YAA8C,EAAA;IAE9C,MAAM,OAAO,GAAG,EAAE;IAElB,IAAI,SAAS,GAAuB,SAAS;IAC7C,OAAO,IAAI,EAAE;AACX,QAAA,MAAM,OAAO,GAAG,YAAY,CAAC,SAAS,CAAC;AACvC,QAAA,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,EAAE,EAAE;AACnC,QAAA,MAAM,KAAK,GAAG,YAAY,CAAC,QAAQ,CAAC;QACpC,IAAI,KAAK,IAAI,IAAI,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;YACvC;;AAEF,QAAA,OAAO,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC;AACtB,QAAA,SAAS,GAAG,QAAQ,CAAC,WAAW,CAAC;QACjC,IAAI,CAAC,SAAS,EAAE;YACd;;;AAIJ,IAAA,OAAO,OAAO;AAChB;;;;;;;;;"}